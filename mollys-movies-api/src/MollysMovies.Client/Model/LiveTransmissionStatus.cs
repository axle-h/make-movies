/*
 * Public Molly's Movies API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = MollysMovies.Client.Client.FileParameter;
using OpenAPIDateConverter = MollysMovies.Client.Client.OpenAPIDateConverter;

namespace MollysMovies.Client.Model
{
    /// <summary>
    /// LiveTransmissionStatus
    /// </summary>
    [DataContract(Name = "LiveTransmissionStatus")]
    public partial class LiveTransmissionStatus : IEquatable<LiveTransmissionStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveTransmissionStatus" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="complete">complete.</param>
        /// <param name="stalled">stalled.</param>
        /// <param name="eta">eta.</param>
        /// <param name="percentComplete">percentComplete.</param>
        public LiveTransmissionStatus(string? name = default(string?), bool complete = default(bool), bool? stalled = default(bool?), int? eta = default(int?), double? percentComplete = default(double?))
        {
            this.Name = name;
            this.Complete = complete;
            this.Stalled = stalled;
            this.Eta = eta;
            this.PercentComplete = percentComplete;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string? Name { get; set; }

        /// <summary>
        /// Gets or Sets Complete
        /// </summary>
        [DataMember(Name = "complete", EmitDefaultValue = true)]
        public bool Complete { get; set; }

        /// <summary>
        /// Gets or Sets Stalled
        /// </summary>
        [DataMember(Name = "stalled", EmitDefaultValue = true)]
        public bool? Stalled { get; set; }

        /// <summary>
        /// Gets or Sets Eta
        /// </summary>
        [DataMember(Name = "eta", EmitDefaultValue = true)]
        public int? Eta { get; set; }

        /// <summary>
        /// Gets or Sets PercentComplete
        /// </summary>
        [DataMember(Name = "percentComplete", EmitDefaultValue = true)]
        public double? PercentComplete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiveTransmissionStatus {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Complete: ").Append(Complete).Append("\n");
            sb.Append("  Stalled: ").Append(Stalled).Append("\n");
            sb.Append("  Eta: ").Append(Eta).Append("\n");
            sb.Append("  PercentComplete: ").Append(PercentComplete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiveTransmissionStatus);
        }

        /// <summary>
        /// Returns true if LiveTransmissionStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of LiveTransmissionStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiveTransmissionStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Complete == input.Complete ||
                    this.Complete.Equals(input.Complete)
                ) && 
                (
                    this.Stalled == input.Stalled ||
                    (this.Stalled != null &&
                    this.Stalled.Equals(input.Stalled))
                ) && 
                (
                    this.Eta == input.Eta ||
                    (this.Eta != null &&
                    this.Eta.Equals(input.Eta))
                ) && 
                (
                    this.PercentComplete == input.PercentComplete ||
                    (this.PercentComplete != null &&
                    this.PercentComplete.Equals(input.PercentComplete))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Complete.GetHashCode();
                if (this.Stalled != null)
                {
                    hashCode = (hashCode * 59) + this.Stalled.GetHashCode();
                }
                if (this.Eta != null)
                {
                    hashCode = (hashCode * 59) + this.Eta.GetHashCode();
                }
                if (this.PercentComplete != null)
                {
                    hashCode = (hashCode * 59) + this.PercentComplete.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
