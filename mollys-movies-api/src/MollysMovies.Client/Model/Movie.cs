/*
 * Public Molly's Movies API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = MollysMovies.Client.Client.FileParameter;
using OpenAPIDateConverter = MollysMovies.Client.Client.OpenAPIDateConverter;

namespace MollysMovies.Client.Model
{
    /// <summary>
    /// Movie
    /// </summary>
    [DataContract(Name = "Movie")]
    public partial class Movie : IEquatable<Movie>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Movie" /> class.
        /// </summary>
        /// <param name="imdbCode">imdbCode.</param>
        /// <param name="title">title.</param>
        /// <param name="language">language.</param>
        /// <param name="year">year.</param>
        /// <param name="rating">rating.</param>
        /// <param name="description">description.</param>
        /// <param name="youTubeTrailerCode">youTubeTrailerCode.</param>
        /// <param name="imageFilename">imageFilename.</param>
        /// <param name="genres">genres.</param>
        /// <param name="torrents">torrents.</param>
        /// <param name="localSource">localSource.</param>
        /// <param name="download">download.</param>
        public Movie(string? imdbCode = default(string?), string? title = default(string?), string? language = default(string?), int year = default(int), double? rating = default(double?), string? description = default(string?), string? youTubeTrailerCode = default(string?), string? imageFilename = default(string?), List<string> genres = default(List<string>), List<Torrent> torrents = default(List<Torrent>), LocalMovieSource localSource = default(LocalMovieSource), MovieDownload download = default(MovieDownload))
        {
            this.ImdbCode = imdbCode;
            this.Title = title;
            this.Language = language;
            this.Year = year;
            this.Rating = rating;
            this.Description = description;
            this.YouTubeTrailerCode = youTubeTrailerCode;
            this.ImageFilename = imageFilename;
            this.Genres = genres;
            this.Torrents = torrents;
            this.LocalSource = localSource;
            this.Download = download;
        }

        /// <summary>
        /// Gets or Sets ImdbCode
        /// </summary>
        [DataMember(Name = "imdbCode", EmitDefaultValue = true)]
        public string? ImdbCode { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string? Title { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = true)]
        public string? Language { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name = "rating", EmitDefaultValue = true)]
        public double? Rating { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets YouTubeTrailerCode
        /// </summary>
        [DataMember(Name = "youTubeTrailerCode", EmitDefaultValue = true)]
        public string? YouTubeTrailerCode { get; set; }

        /// <summary>
        /// Gets or Sets ImageFilename
        /// </summary>
        [DataMember(Name = "imageFilename", EmitDefaultValue = true)]
        public string? ImageFilename { get; set; }

        /// <summary>
        /// Gets or Sets Genres
        /// </summary>
        [DataMember(Name = "genres", EmitDefaultValue = true)]
        public List<string> Genres { get; set; }

        /// <summary>
        /// Gets or Sets Torrents
        /// </summary>
        [DataMember(Name = "torrents", EmitDefaultValue = true)]
        public List<Torrent> Torrents { get; set; }

        /// <summary>
        /// Gets or Sets LocalSource
        /// </summary>
        [DataMember(Name = "localSource", EmitDefaultValue = false)]
        public LocalMovieSource LocalSource { get; set; }

        /// <summary>
        /// Gets or Sets Download
        /// </summary>
        [DataMember(Name = "download", EmitDefaultValue = false)]
        public MovieDownload Download { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Movie {\n");
            sb.Append("  ImdbCode: ").Append(ImdbCode).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  YouTubeTrailerCode: ").Append(YouTubeTrailerCode).Append("\n");
            sb.Append("  ImageFilename: ").Append(ImageFilename).Append("\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("  Torrents: ").Append(Torrents).Append("\n");
            sb.Append("  LocalSource: ").Append(LocalSource).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Movie);
        }

        /// <summary>
        /// Returns true if Movie instances are equal
        /// </summary>
        /// <param name="input">Instance of Movie to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Movie input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ImdbCode == input.ImdbCode ||
                    (this.ImdbCode != null &&
                    this.ImdbCode.Equals(input.ImdbCode))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.YouTubeTrailerCode == input.YouTubeTrailerCode ||
                    (this.YouTubeTrailerCode != null &&
                    this.YouTubeTrailerCode.Equals(input.YouTubeTrailerCode))
                ) && 
                (
                    this.ImageFilename == input.ImageFilename ||
                    (this.ImageFilename != null &&
                    this.ImageFilename.Equals(input.ImageFilename))
                ) && 
                (
                    this.Genres == input.Genres ||
                    this.Genres != null &&
                    input.Genres != null &&
                    this.Genres.SequenceEqual(input.Genres)
                ) && 
                (
                    this.Torrents == input.Torrents ||
                    this.Torrents != null &&
                    input.Torrents != null &&
                    this.Torrents.SequenceEqual(input.Torrents)
                ) && 
                (
                    this.LocalSource == input.LocalSource ||
                    (this.LocalSource != null &&
                    this.LocalSource.Equals(input.LocalSource))
                ) && 
                (
                    this.Download == input.Download ||
                    (this.Download != null &&
                    this.Download.Equals(input.Download))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImdbCode != null)
                {
                    hashCode = (hashCode * 59) + this.ImdbCode.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Year.GetHashCode();
                if (this.Rating != null)
                {
                    hashCode = (hashCode * 59) + this.Rating.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.YouTubeTrailerCode != null)
                {
                    hashCode = (hashCode * 59) + this.YouTubeTrailerCode.GetHashCode();
                }
                if (this.ImageFilename != null)
                {
                    hashCode = (hashCode * 59) + this.ImageFilename.GetHashCode();
                }
                if (this.Genres != null)
                {
                    hashCode = (hashCode * 59) + this.Genres.GetHashCode();
                }
                if (this.Torrents != null)
                {
                    hashCode = (hashCode * 59) + this.Torrents.GetHashCode();
                }
                if (this.LocalSource != null)
                {
                    hashCode = (hashCode * 59) + this.LocalSource.GetHashCode();
                }
                if (this.Download != null)
                {
                    hashCode = (hashCode * 59) + this.Download.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
