/*
 * Public Molly's Movies API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = MollysMovies.Client.Client.FileParameter;
using OpenAPIDateConverter = MollysMovies.Client.Client.OpenAPIDateConverter;

namespace MollysMovies.Client.Model
{
    /// <summary>
    /// MovieDownload
    /// </summary>
    [DataContract(Name = "MovieDownload")]
    public partial class MovieDownload : IEquatable<MovieDownload>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public MovieDownloadStatusCode? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MovieDownload" /> class.
        /// </summary>
        /// <param name="imdbCode">imdbCode.</param>
        /// <param name="externalId">externalId.</param>
        /// <param name="name">name.</param>
        /// <param name="status">status.</param>
        public MovieDownload(string? imdbCode = default(string?), string? externalId = default(string?), string? name = default(string?), MovieDownloadStatusCode? status = default(MovieDownloadStatusCode?))
        {
            this.ImdbCode = imdbCode;
            this.ExternalId = externalId;
            this.Name = name;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets ImdbCode
        /// </summary>
        [DataMember(Name = "imdbCode", EmitDefaultValue = true)]
        public string? ImdbCode { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name = "externalId", EmitDefaultValue = true)]
        public string? ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string? Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MovieDownload {\n");
            sb.Append("  ImdbCode: ").Append(ImdbCode).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MovieDownload);
        }

        /// <summary>
        /// Returns true if MovieDownload instances are equal
        /// </summary>
        /// <param name="input">Instance of MovieDownload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MovieDownload input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ImdbCode == input.ImdbCode ||
                    (this.ImdbCode != null &&
                    this.ImdbCode.Equals(input.ImdbCode))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImdbCode != null)
                {
                    hashCode = (hashCode * 59) + this.ImdbCode.GetHashCode();
                }
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
