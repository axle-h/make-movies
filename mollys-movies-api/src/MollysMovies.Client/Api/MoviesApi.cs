/*
 * Public Molly's Movies API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using MollysMovies.Client.Client;
using MollysMovies.Client.Model;

namespace MollysMovies.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMoviesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imdbCode"></param>
        /// <returns>Movie</returns>
        Movie GetMovie(string imdbCode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imdbCode"></param>
        /// <returns>ApiResponse of Movie</returns>
        ApiResponse<Movie> GetMovieWithHttpInfo(string imdbCode);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="quality"> (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="hasDownload"> (optional)</param>
        /// <param name="downloaded"> (optional)</param>
        /// <param name="genre"> (optional)</param>
        /// <param name="yearFrom"> (optional)</param>
        /// <param name="yearTo"> (optional)</param>
        /// <param name="ratingFrom"> (optional)</param>
        /// <param name="ratingTo"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderByDescending"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>MoviePaginatedData</returns>
        MoviePaginatedData SearchMovies(string? title = default(string?), string? quality = default(string?), string? language = default(string?), bool? hasDownload = default(bool?), bool? downloaded = default(bool?), string? genre = default(string?), int? yearFrom = default(int?), int? yearTo = default(int?), int? ratingFrom = default(int?), int? ratingTo = default(int?), MoviesOrderBy? orderBy = default(MoviesOrderBy?), bool? orderByDescending = default(bool?), int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="quality"> (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="hasDownload"> (optional)</param>
        /// <param name="downloaded"> (optional)</param>
        /// <param name="genre"> (optional)</param>
        /// <param name="yearFrom"> (optional)</param>
        /// <param name="yearTo"> (optional)</param>
        /// <param name="ratingFrom"> (optional)</param>
        /// <param name="ratingTo"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderByDescending"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of MoviePaginatedData</returns>
        ApiResponse<MoviePaginatedData> SearchMoviesWithHttpInfo(string? title = default(string?), string? quality = default(string?), string? language = default(string?), bool? hasDownload = default(bool?), bool? downloaded = default(bool?), string? genre = default(string?), int? yearFrom = default(int?), int? yearTo = default(int?), int? ratingFrom = default(int?), int? ratingTo = default(int?), MoviesOrderBy? orderBy = default(MoviesOrderBy?), bool? orderByDescending = default(bool?), int? page = default(int?), int? limit = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMoviesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imdbCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Movie</returns>
        System.Threading.Tasks.Task<Movie> GetMovieAsync(string imdbCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imdbCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        System.Threading.Tasks.Task<ApiResponse<Movie>> GetMovieWithHttpInfoAsync(string imdbCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="quality"> (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="hasDownload"> (optional)</param>
        /// <param name="downloaded"> (optional)</param>
        /// <param name="genre"> (optional)</param>
        /// <param name="yearFrom"> (optional)</param>
        /// <param name="yearTo"> (optional)</param>
        /// <param name="ratingFrom"> (optional)</param>
        /// <param name="ratingTo"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderByDescending"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MoviePaginatedData</returns>
        System.Threading.Tasks.Task<MoviePaginatedData> SearchMoviesAsync(string? title = default(string?), string? quality = default(string?), string? language = default(string?), bool? hasDownload = default(bool?), bool? downloaded = default(bool?), string? genre = default(string?), int? yearFrom = default(int?), int? yearTo = default(int?), int? ratingFrom = default(int?), int? ratingTo = default(int?), MoviesOrderBy? orderBy = default(MoviesOrderBy?), bool? orderByDescending = default(bool?), int? page = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="quality"> (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="hasDownload"> (optional)</param>
        /// <param name="downloaded"> (optional)</param>
        /// <param name="genre"> (optional)</param>
        /// <param name="yearFrom"> (optional)</param>
        /// <param name="yearTo"> (optional)</param>
        /// <param name="ratingFrom"> (optional)</param>
        /// <param name="ratingTo"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderByDescending"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MoviePaginatedData)</returns>
        System.Threading.Tasks.Task<ApiResponse<MoviePaginatedData>> SearchMoviesWithHttpInfoAsync(string? title = default(string?), string? quality = default(string?), string? language = default(string?), bool? hasDownload = default(bool?), bool? downloaded = default(bool?), string? genre = default(string?), int? yearFrom = default(int?), int? yearTo = default(int?), int? ratingFrom = default(int?), int? ratingTo = default(int?), MoviesOrderBy? orderBy = default(MoviesOrderBy?), bool? orderByDescending = default(bool?), int? page = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMoviesApi : IMoviesApiSync, IMoviesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MoviesApi : IDisposable, IMoviesApi
    {
        private MollysMovies.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MoviesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MoviesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MoviesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MoviesApi(string basePath)
        {
            this.Configuration = MollysMovies.Client.Client.Configuration.MergeConfigurations(
                MollysMovies.Client.Client.GlobalConfiguration.Instance,
                new MollysMovies.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new MollysMovies.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = MollysMovies.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MoviesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MoviesApi(MollysMovies.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MollysMovies.Client.Client.Configuration.MergeConfigurations(
                MollysMovies.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new MollysMovies.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = MollysMovies.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MoviesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MoviesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MoviesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MoviesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = MollysMovies.Client.Client.Configuration.MergeConfigurations(
                MollysMovies.Client.Client.GlobalConfiguration.Instance,
                new MollysMovies.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new MollysMovies.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = MollysMovies.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MoviesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MoviesApi(HttpClient client, MollysMovies.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = MollysMovies.Client.Client.Configuration.MergeConfigurations(
                MollysMovies.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new MollysMovies.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = MollysMovies.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MoviesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MoviesApi(MollysMovies.Client.Client.ISynchronousClient client, MollysMovies.Client.Client.IAsynchronousClient asyncClient, MollysMovies.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MollysMovies.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public MollysMovies.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MollysMovies.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MollysMovies.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MollysMovies.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MollysMovies.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imdbCode"></param>
        /// <returns>Movie</returns>
        public Movie GetMovie(string imdbCode)
        {
            MollysMovies.Client.Client.ApiResponse<Movie> localVarResponse = GetMovieWithHttpInfo(imdbCode);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imdbCode"></param>
        /// <returns>ApiResponse of Movie</returns>
        public MollysMovies.Client.Client.ApiResponse<Movie> GetMovieWithHttpInfo(string imdbCode)
        {
            MollysMovies.Client.Client.RequestOptions localVarRequestOptions = new MollysMovies.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = MollysMovies.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MollysMovies.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("imdbCode", MollysMovies.Client.Client.ClientUtils.ParameterToString(imdbCode)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Movie>("/api/v1/movies/{imdbCode}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMovie", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imdbCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Movie</returns>
        public async System.Threading.Tasks.Task<Movie> GetMovieAsync(string imdbCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MollysMovies.Client.Client.ApiResponse<Movie> localVarResponse = await GetMovieWithHttpInfoAsync(imdbCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imdbCode"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Movie)</returns>
        public async System.Threading.Tasks.Task<MollysMovies.Client.Client.ApiResponse<Movie>> GetMovieWithHttpInfoAsync(string imdbCode, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MollysMovies.Client.Client.RequestOptions localVarRequestOptions = new MollysMovies.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = MollysMovies.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MollysMovies.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("imdbCode", MollysMovies.Client.Client.ClientUtils.ParameterToString(imdbCode)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Movie>("/api/v1/movies/{imdbCode}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMovie", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="quality"> (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="hasDownload"> (optional)</param>
        /// <param name="downloaded"> (optional)</param>
        /// <param name="genre"> (optional)</param>
        /// <param name="yearFrom"> (optional)</param>
        /// <param name="yearTo"> (optional)</param>
        /// <param name="ratingFrom"> (optional)</param>
        /// <param name="ratingTo"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderByDescending"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>MoviePaginatedData</returns>
        public MoviePaginatedData SearchMovies(string? title = default(string?), string? quality = default(string?), string? language = default(string?), bool? hasDownload = default(bool?), bool? downloaded = default(bool?), string? genre = default(string?), int? yearFrom = default(int?), int? yearTo = default(int?), int? ratingFrom = default(int?), int? ratingTo = default(int?), MoviesOrderBy? orderBy = default(MoviesOrderBy?), bool? orderByDescending = default(bool?), int? page = default(int?), int? limit = default(int?))
        {
            MollysMovies.Client.Client.ApiResponse<MoviePaginatedData> localVarResponse = SearchMoviesWithHttpInfo(title, quality, language, hasDownload, downloaded, genre, yearFrom, yearTo, ratingFrom, ratingTo, orderBy, orderByDescending, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="quality"> (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="hasDownload"> (optional)</param>
        /// <param name="downloaded"> (optional)</param>
        /// <param name="genre"> (optional)</param>
        /// <param name="yearFrom"> (optional)</param>
        /// <param name="yearTo"> (optional)</param>
        /// <param name="ratingFrom"> (optional)</param>
        /// <param name="ratingTo"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderByDescending"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of MoviePaginatedData</returns>
        public MollysMovies.Client.Client.ApiResponse<MoviePaginatedData> SearchMoviesWithHttpInfo(string? title = default(string?), string? quality = default(string?), string? language = default(string?), bool? hasDownload = default(bool?), bool? downloaded = default(bool?), string? genre = default(string?), int? yearFrom = default(int?), int? yearTo = default(int?), int? ratingFrom = default(int?), int? ratingTo = default(int?), MoviesOrderBy? orderBy = default(MoviesOrderBy?), bool? orderByDescending = default(bool?), int? page = default(int?), int? limit = default(int?))
        {
            MollysMovies.Client.Client.RequestOptions localVarRequestOptions = new MollysMovies.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = MollysMovies.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MollysMovies.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Title", title));
            }
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Quality", quality));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Language", language));
            }
            if (hasDownload != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "HasDownload", hasDownload));
            }
            if (downloaded != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Downloaded", downloaded));
            }
            if (genre != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Genre", genre));
            }
            if (yearFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "YearFrom", yearFrom));
            }
            if (yearTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "YearTo", yearTo));
            }
            if (ratingFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "RatingFrom", ratingFrom));
            }
            if (ratingTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "RatingTo", ratingTo));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (orderByDescending != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderByDescending", orderByDescending));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Limit", limit));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<MoviePaginatedData>("/api/v1/movies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMovies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="quality"> (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="hasDownload"> (optional)</param>
        /// <param name="downloaded"> (optional)</param>
        /// <param name="genre"> (optional)</param>
        /// <param name="yearFrom"> (optional)</param>
        /// <param name="yearTo"> (optional)</param>
        /// <param name="ratingFrom"> (optional)</param>
        /// <param name="ratingTo"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderByDescending"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MoviePaginatedData</returns>
        public async System.Threading.Tasks.Task<MoviePaginatedData> SearchMoviesAsync(string? title = default(string?), string? quality = default(string?), string? language = default(string?), bool? hasDownload = default(bool?), bool? downloaded = default(bool?), string? genre = default(string?), int? yearFrom = default(int?), int? yearTo = default(int?), int? ratingFrom = default(int?), int? ratingTo = default(int?), MoviesOrderBy? orderBy = default(MoviesOrderBy?), bool? orderByDescending = default(bool?), int? page = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MollysMovies.Client.Client.ApiResponse<MoviePaginatedData> localVarResponse = await SearchMoviesWithHttpInfoAsync(title, quality, language, hasDownload, downloaded, genre, yearFrom, yearTo, ratingFrom, ratingTo, orderBy, orderByDescending, page, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="MollysMovies.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"> (optional)</param>
        /// <param name="quality"> (optional)</param>
        /// <param name="language"> (optional)</param>
        /// <param name="hasDownload"> (optional)</param>
        /// <param name="downloaded"> (optional)</param>
        /// <param name="genre"> (optional)</param>
        /// <param name="yearFrom"> (optional)</param>
        /// <param name="yearTo"> (optional)</param>
        /// <param name="ratingFrom"> (optional)</param>
        /// <param name="ratingTo"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="orderByDescending"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MoviePaginatedData)</returns>
        public async System.Threading.Tasks.Task<MollysMovies.Client.Client.ApiResponse<MoviePaginatedData>> SearchMoviesWithHttpInfoAsync(string? title = default(string?), string? quality = default(string?), string? language = default(string?), bool? hasDownload = default(bool?), bool? downloaded = default(bool?), string? genre = default(string?), int? yearFrom = default(int?), int? yearTo = default(int?), int? ratingFrom = default(int?), int? ratingTo = default(int?), MoviesOrderBy? orderBy = default(MoviesOrderBy?), bool? orderByDescending = default(bool?), int? page = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            MollysMovies.Client.Client.RequestOptions localVarRequestOptions = new MollysMovies.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = MollysMovies.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = MollysMovies.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (title != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Title", title));
            }
            if (quality != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Quality", quality));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Language", language));
            }
            if (hasDownload != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "HasDownload", hasDownload));
            }
            if (downloaded != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Downloaded", downloaded));
            }
            if (genre != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Genre", genre));
            }
            if (yearFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "YearFrom", yearFrom));
            }
            if (yearTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "YearTo", yearTo));
            }
            if (ratingFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "RatingFrom", ratingFrom));
            }
            if (ratingTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "RatingTo", ratingTo));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
            }
            if (orderByDescending != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "OrderByDescending", orderByDescending));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(MollysMovies.Client.Client.ClientUtils.ParameterToMultiMap("", "Limit", limit));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MoviePaginatedData>("/api/v1/movies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMovies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
