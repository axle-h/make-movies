/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createMovieFromDiscriminatorValue, createProblemDetailsFromDiscriminatorValue, type Movie, type ProblemDetails } from '../../../../models/';
import { DownloadRequestBuilderRequestsMetadata, type DownloadRequestBuilder } from './download/';
import { ImageRequestBuilderRequestsMetadata, type ImageRequestBuilder } from './image/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/v1/movie/{id}
 */
export interface MovieItemRequestBuilder extends BaseRequestBuilder<MovieItemRequestBuilder> {
    /**
     * The download property
     */
    get download(): DownloadRequestBuilder;
    /**
     * The image property
     */
    get image(): ImageRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Movie>}
     * @throws {ProblemDetails} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Movie | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const MovieItemRequestBuilderUriTemplate = "{+baseurl}/api/v1/movie/{id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MovieItemRequestBuilderNavigationMetadata: Record<Exclude<keyof MovieItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    download: {
        requestsMetadata: DownloadRequestBuilderRequestsMetadata,
    },
    image: {
        requestsMetadata: ImageRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MovieItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: MovieItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            404: createProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMovieFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
