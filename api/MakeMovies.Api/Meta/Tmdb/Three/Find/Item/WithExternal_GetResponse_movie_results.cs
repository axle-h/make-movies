// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace MakeMovies.Api.Meta.Tmdb.Three.Find.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class WithExternal_GetResponse_movie_results : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adult property</summary>
        public bool? Adult { get; set; }
        /// <summary>The backdrop_path property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackdropPath { get; set; }
#nullable restore
#else
        public string BackdropPath { get; set; }
#endif
        /// <summary>The genre_ids property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? GenreIds { get; set; }
#nullable restore
#else
        public List<int?> GenreIds { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The media_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaType { get; set; }
#nullable restore
#else
        public string MediaType { get; set; }
#endif
        /// <summary>The original_language property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalLanguage { get; set; }
#nullable restore
#else
        public string OriginalLanguage { get; set; }
#endif
        /// <summary>The original_title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalTitle { get; set; }
#nullable restore
#else
        public string OriginalTitle { get; set; }
#endif
        /// <summary>The overview property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Overview { get; set; }
#nullable restore
#else
        public string Overview { get; set; }
#endif
        /// <summary>The popularity property</summary>
        public double? Popularity { get; set; }
        /// <summary>The poster_path property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PosterPath { get; set; }
#nullable restore
#else
        public string PosterPath { get; set; }
#endif
        /// <summary>The release_date property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReleaseDate { get; set; }
#nullable restore
#else
        public string ReleaseDate { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The video property</summary>
        public bool? Video { get; set; }
        /// <summary>The vote_average property</summary>
        public double? VoteAverage { get; set; }
        /// <summary>The vote_count property</summary>
        public int? VoteCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::MakeMovies.Api.Meta.Tmdb.Three.Find.Item.WithExternal_GetResponse_movie_results"/> and sets the default values.
        /// </summary>
        public WithExternal_GetResponse_movie_results()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::MakeMovies.Api.Meta.Tmdb.Three.Find.Item.WithExternal_GetResponse_movie_results"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::MakeMovies.Api.Meta.Tmdb.Three.Find.Item.WithExternal_GetResponse_movie_results CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::MakeMovies.Api.Meta.Tmdb.Three.Find.Item.WithExternal_GetResponse_movie_results();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adult", n => { Adult = n.GetBoolValue(); } },
                { "backdrop_path", n => { BackdropPath = n.GetStringValue(); } },
                { "genre_ids", n => { GenreIds = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "media_type", n => { MediaType = n.GetStringValue(); } },
                { "original_language", n => { OriginalLanguage = n.GetStringValue(); } },
                { "original_title", n => { OriginalTitle = n.GetStringValue(); } },
                { "overview", n => { Overview = n.GetStringValue(); } },
                { "popularity", n => { Popularity = n.GetDoubleValue(); } },
                { "poster_path", n => { PosterPath = n.GetStringValue(); } },
                { "release_date", n => { ReleaseDate = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "video", n => { Video = n.GetBoolValue(); } },
                { "vote_average", n => { VoteAverage = n.GetDoubleValue(); } },
                { "vote_count", n => { VoteCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("adult", Adult);
            writer.WriteStringValue("backdrop_path", BackdropPath);
            writer.WriteCollectionOfPrimitiveValues<int?>("genre_ids", GenreIds);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("media_type", MediaType);
            writer.WriteStringValue("original_language", OriginalLanguage);
            writer.WriteStringValue("original_title", OriginalTitle);
            writer.WriteStringValue("overview", Overview);
            writer.WriteDoubleValue("popularity", Popularity);
            writer.WriteStringValue("poster_path", PosterPath);
            writer.WriteStringValue("release_date", ReleaseDate);
            writer.WriteStringValue("title", Title);
            writer.WriteBoolValue("video", Video);
            writer.WriteDoubleValue("vote_average", VoteAverage);
            writer.WriteIntValue("vote_count", VoteCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
